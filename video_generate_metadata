#!/usr/bin/env python3

import os
import shutil
import sys
import subprocess
import json
from video_slibrary_metadata_utils import get_date_created_and_identifier

def error_exit(message):
    print(message, file=sys.stderr)
    sys.exit(1)

def check_file_exists(filename):
    if not os.path.exists(filename):
        error_exit(f"Could not find file: {filename}")

def generate_metadata(video_file):

    print(f"Processing file: {video_file}")

    # Check if video file exists
    check_file_exists(video_file)

    # Extract file extension
    extension = os.path.splitext(video_file)[1][1:].lower()

    # Extract the model of the camera
    model = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Model '{video_file}'")

    # Create meta data file name
    meta_file = f"{os.path.splitext(video_file)[0]}_meta.json"

    DATE_CREATED, IDENTIFIER = get_date_created_and_identifier(video_file, extension, model)
    
    if DATE_CREATED is None or IDENTIFIER is None:
        error_exit("date_created or identifier is None. Exiting.")

    # Extract other metadata
    MAKE = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Make '{video_file}'") or 'Apple - DEFAULT'
    MODEL = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Model '{video_file}'") or 'iPhone 11 Pro - DEFAULT'
    SOURCE_IMAGE_HEIGHT = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -SourceImageHeight '{video_file}'")
    SOURCE_IMAGE_WIDTH = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -SourceImageWidth '{video_file}'")
    VIDEO_FRAME_RATE = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -VideoFrameRate '{video_file}'")
    COMPRESSOR_NAME = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -CompressorName '{video_file}'")
    GPS = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -GPSCoordinates '{video_file}'")
    if GPS:
        GPS = GPS.replace(' ', ', ')
    else:
        GPS = '-35.2975906, 149.1012676, 554 - DEFAULT'
    COUNTRY_CODE = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -CountryCode '{video_file}'") or 'CHE - DEFAULT'
    COUNTRY = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Country '{video_file}'") or 'Switzerland - DEFAULT'
    CREATOR = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Creator '{video_file}'") or 'Leo Huber - DEFAULT'
    STATE = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -State '{video_file}'") or 'Zurich - DEFAULT'
    CITY = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -City '{video_file}'") or 'Zurich - DEFAULT'
    SUBLOCATION = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Location '{video_file}'") or 'Sublocation - DEFAULT'
    HEADLINE = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Headline '{video_file}'") or 'Headline - DEFAULT'
    TITLE_SUFFIX = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Title '{video_file}'")
    if TITLE_SUFFIX:
        TITLE_SUFFIX = TITLE_SUFFIX.partition('_')[-1]
    else:
        TITLE_SUFFIX = 'Title Suffix - DEFAULT'
    DESCRIPTION = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Description '{video_file}'") or 'Description - DEFAULT'
    COPYRIGHT = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Rights '{video_file}'") or 'Leo Huber - DEFAULT'

    # Create a dictionary to hold the metadata
    metadata_fields = [
        ("IDENTIFIER", IDENTIFIER),
        ("DATE_CREATED", DATE_CREATED),
        ("MAKE", MAKE),
        ("MODEL", MODEL),
        ("SOURCE_IMAGE_HEIGHT", SOURCE_IMAGE_HEIGHT),
        ("SOURCE_IMAGE_WIDTH", SOURCE_IMAGE_WIDTH),
        ("VIDEO_FRAME_RATE", VIDEO_FRAME_RATE),
        ("COMPRESSOR_NAME", COMPRESSOR_NAME),
        ("GPS", GPS),
        ("CREATOR", CREATOR),
        ("COUNTRY_CODE", COUNTRY_CODE),
        ("COUNTRY", COUNTRY),
        ("STATE", STATE),
        ("CITY", CITY),
        ("SUBLOCATION", SUBLOCATION),
        ("HEADLINE", HEADLINE),
        ("TITLE_SUFFIX", TITLE_SUFFIX),
        ("DESCRIPTION", DESCRIPTION),
        ("COPYRIGHT", COPYRIGHT),
    ]

    metadata = {}
    for key, value in metadata_fields:
        if value and value != '':
            metadata[key] = value
        else:
            print(f"Skipping {key} as it has an empty value")

    # Write metadata to a JSON file
    with open(meta_file, 'w') as f:
        json.dump(metadata, f, indent=4)

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

for movie_file in sys.argv[1:]:
    generate_metadata(movie_file)