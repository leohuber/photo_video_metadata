#!/usr/bin/env python3

import json
import sys
import shutil
import os
import subprocess

def error_exit(message):
	print(message, file=sys.stderr)
	sys.exit(1)

def check_file_exists(file_path):
	if not os.path.isfile(file_path):
		error_exit(f"Could not find file: {file_path}")

def set_meta_info(video_file):
	check_file_exists(video_file)

	extension = os.path.splitext(video_file)[1].lower()

	if extension in ['.mov', '.mp4']:
		meta_file = os.path.splitext(video_file)[0] + '_meta.json'
		check_file_exists(meta_file)

		# Load meta data from the meta file
		with open(meta_file) as f:
			meta_data = json.load(f)

		# Load default meta data from a template file and overwrite the values with the values from default meta data file
		template_file = "./zzz_meta_data_template.json"
		if os.path.isfile(template_file):
			with open(template_file) as f:
				template_data = json.load(f)
				meta_data.update(template_data)

		gps = meta_data.get('GPS')
		if gps:
			commands = [
				['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-UserData:GPSCoordinates={gps}', video_file],
				['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-GPSCoordinates={gps}', video_file],
			]
			for cmd in commands:
				result = subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
				if result.returncode != 0:
					error_exit("Could not update GPS coordinates")

		# TODO: Additional exiftool commands would be implemented here
		
		identifier = meta_data.get('IDENTIFIER', '')
		title_suffix = meta_data.get('TITLE_SUFFIX', '')
		print(f"Identifier: {identifier}")
		print(f"Title Suffix: {title_suffix}")
		new_video_file = f"{identifier}_{title_suffix}{extension}"
		if video_file != new_video_file:
			os.rename(video_file, new_video_file)

		new_meta_file = f"{identifier}_{title_suffix}_meta.json"
		if meta_file != new_meta_file:
			os.rename(meta_file, new_meta_file)

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

for movie_file in sys.argv[1:]:
	set_meta_info(movie_file)