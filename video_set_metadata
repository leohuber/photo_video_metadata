#!/usr/bin/env python3

import json
import sys
import shutil
import os
import subprocess

def error_exit(message):
	print(message, file=sys.stderr)
	sys.exit(1)

def check_file_exists(file_path):
	if not os.path.isfile(file_path):
		error_exit(f"Could not find file: {file_path}")

def set_meta_info(video_file):
	check_file_exists(video_file)

	extension = os.path.splitext(video_file)[1].lower()

	if extension in ['.mov', '.mp4']:
		meta_file = os.path.splitext(video_file)[0] + '_meta.json'
		check_file_exists(meta_file)

		# Load meta data from the meta file
		with open(meta_file) as f:
			meta_data = json.load(f)
		
		# Load default meta data from a template file and overwrite the values with the values from default meta data file
		template_file = "./zzz_meta_data_template.json"
		if os.path.isfile(template_file):
			with open(template_file) as f:
				template_data = json.load(f)
				meta_data.update(template_data)

		identifier = meta_data.get('IDENTIFIER')
		date_created = meta_data.get('DATE_CREATED')
		make = meta_data.get('MAKE')
		model = meta_data.get('MODEL')
		source_image_height = meta_data.get('SOURCE_IMAGE_HEIGHT')
		source_image_width = meta_data.get('SOURCE_IMAGE_WIDTH')
		video_frame_rate = meta_data.get('VIDEO_FRAME_RATE')
		compressor_name = meta_data.get('COMPRESSOR_NAME')
		gps = meta_data.get('GPS')
		creator = meta_data.get('CREATOR')
		country_code = meta_data.get('COUNTRY_CODE')
		country = meta_data.get('COUNTRY')
		state = meta_data.get('STATE')
		city = meta_data.get('CITY')
		sublocation = meta_data.get('SUBLOCATION')
		headline = meta_data.get('HEADLINE')
		title_suffix = meta_data.get('TITLE_SUFFIX')
		description = meta_data.get('DESCRIPTION')
		copyright = meta_data.get('COPYRIGHT')

		commands = []

		if gps:
			commands.extend([
				['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-UserData:GPSCoordinates={gps}', video_file],
				['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-GPSCoordinates={gps}', video_file],
			])

		if source_image_height:
			commands.append(['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', '-xmp:VideoFrameSizeUnit=pixels', f'-xmp:VideoFrameSizeH={source_image_height}', video_file])
		if source_image_width:
			commands.append(['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', '-xmp:VideoFrameSizeUnit=pixels', f'-xmp:VideoFrameSizeW={source_image_width}', video_file])
		if video_frame_rate:
			commands.append(['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-xmp:VideoFrameRate={video_frame_rate}', video_file])
		if compressor_name:
			commands.append(['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-xmp:VideoCompressor={compressor_name}', video_file])
		if date_created:
			commands.append(['exiftool', '-api', 'largefilesupport=1', '-overwrite_original', f'-xmp:ShotDate={date_created}', video_file])

		# TODO: Additional exiftool commands would be implemented here

		for cmd in commands:
			result = subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
			if result.returncode != 0:
				error_exit("Could not update metadata")
		
		# rename movie file
		new_video_file = f"{identifier}_{title_suffix}{extension}"
		if video_file != new_video_file:
			os.rename(video_file, new_video_file)

		# rename meta data file
		new_meta_file = f"{identifier}_{title_suffix}_meta.json"
		if meta_file != new_meta_file:
			os.rename(meta_file, new_meta_file)

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

for movie_file in sys.argv[1:]:
	set_meta_info(movie_file)